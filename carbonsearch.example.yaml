# the special start to a metric that signals that this is a carbonsearch query
# the * is so that older versions of graphite-web will recognize this as
# a 'pattern', and thus be allowed to return multiple results
prefix: "virt.v1.*."
# where the daemon will serve queries from
port: 8070

# ----queries----
# the maximum number of metrics that a query can return. if a query selects
# more metrics, it is an error. you'll want to tune this number to be
# reasonable for the serving capacity of your graphite stores, as this is the
# setting that prevents carbonsearch from asking the zipper to fetch the data
# for hundreds of thousands of metrics.
result_limit: 1000
# the maximum number of tags in a single query:
# "virt.v1.servers-dc:us_east.servers-num_cpus:8" has 2 tags.
query_limit: 100

# ----reporting----
# how long between graphite updates (seconds) for carbonsearch metrics
interval_sec: 60
# how many 100ms buckets to use in graphite metric: carbon.search.{host}.requests_in_0ms_to_100ms, ...
buckets: 10

# ----indexes----
# how often to materialize the 'read' side of the index. larger values mean
# less overall work for the system, at the cost of less up-to-date query
# results.  5-10 seconds is good for development, production values in the 1-5m
# range are probably reasonable. factors here are: workload (read/write
# volumes), available CPU on the box running carbon search, and how soon you
# expect changes to be visible in the search
index_rotation_rate: "60s"
# how to query direct associations between tag<->metric (e.g. the 'custom' in 'custom-favorites:btyler')
full_index_service: "custom"
# how to query the text index (e.g. the 'text' in 'text-match:foobar')
text_index_service: "text"
# mapping of join key -> query prefix for split indexes. for example: the
# 'servers' data source in 'servers-dc:us_east' associates tags with metrics
# through the 'fqdn' join key.
split_indexes:
    fqdn:
        - "servers" # like some asset management data source, or facts from the server itself
        - "lb" # liveness in the loadbalancer, pool association for this host, etc.

# ----consumers----
# adding a line to 'consumers' implies that carbonsearch should use this consumer.
# the value should be the absolute path to the config file for that consumer type
consumers:
    kafka: "kafka.yaml"
    httpapi: "httpapi.yaml"
